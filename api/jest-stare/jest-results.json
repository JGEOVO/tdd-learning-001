{
  "numFailedTestSuites": 0,
  "numFailedTests": 0,
  "numPassedTestSuites": 3,
  "numPassedTests": 27,
  "numPendingTestSuites": 0,
  "numPendingTests": 0,
  "numRuntimeErrorTestSuites": 0,
  "numTodoTests": 0,
  "numTotalTestSuites": 3,
  "numTotalTests": 27,
  "openHandles": [],
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1564734346225,
  "success": false,
  "testResults": [
    {
      "failureMessage": null,
      "numFailingTests": 0,
      "numPassingTests": 15,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "perfStats": {
        "end": 1564734347877,
        "start": 1564734346568
      },
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "/home/nodejs/app/util/validateRequest.test.js",
      "testResults": [
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is not an object"
          ],
          "duration": 2,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is not an object Should return an error object, if the request is Undefined",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Should return an error object, if the request is Undefined"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is not an object"
          ],
          "duration": 1,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is not an object Should return null, if the request is Null",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Should return null, if the request is Null"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is not an object"
          ],
          "duration": 0,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is not an object Should return an error object, if the request is a number",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "Should return an error object, if the request is a number"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is an object"
          ],
          "duration": 0,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is an object should return null, if the schema has no keys",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return null, if the schema has no keys"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is an object"
          ],
          "duration": 0,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is an object should return null, if the schema has no valid request object",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return null, if the schema has no valid request object"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is an object",
            "When the schema has at least one valid request object",
            "When the schema has the body object"
          ],
          "duration": 1,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is an object When the schema has at least one valid request object When the schema has the body object should validate, the request object matches the schema",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should validate, the request object matches the schema"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is an object",
            "When the schema has at least one valid request object",
            "When the schema has the body object"
          ],
          "duration": 2,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is an object When the schema has at least one valid request object When the schema has the body object should validate returning the error since, the request object missmatches the schema",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should validate returning the error since, the request object missmatches the schema"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is an object",
            "When the schema has at least one valid request object",
            "When the schema has the cookies object"
          ],
          "duration": 0,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is an object When the schema has at least one valid request object When the schema has the cookies object should validate, the request object matches the schema",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should validate, the request object matches the schema"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is an object",
            "When the schema has at least one valid request object",
            "When the schema has the cookies object"
          ],
          "duration": 1,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is an object When the schema has at least one valid request object When the schema has the cookies object should validate returning the error since, the request object missmatches the schema",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should validate returning the error since, the request object missmatches the schema"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is an object",
            "When the schema has at least one valid request object",
            "When the schema has the headers object"
          ],
          "duration": 0,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is an object When the schema has at least one valid request object When the schema has the headers object should validate, the request object matches the schema",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should validate, the request object matches the schema"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is an object",
            "When the schema has at least one valid request object",
            "When the schema has the headers object"
          ],
          "duration": 0,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is an object When the schema has at least one valid request object When the schema has the headers object should validate returning the error since, the request object missmatches the schema",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should validate returning the error since, the request object missmatches the schema"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is an object",
            "When the schema has at least one valid request object",
            "When the schema has the params object"
          ],
          "duration": 0,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is an object When the schema has at least one valid request object When the schema has the params object should validate, the request object matches the schema",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should validate, the request object matches the schema"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is an object",
            "When the schema has at least one valid request object",
            "When the schema has the params object"
          ],
          "duration": 1,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is an object When the schema has at least one valid request object When the schema has the params object should validate returning the error since, the request object missmatches the schema",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should validate returning the error since, the request object missmatches the schema"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is an object",
            "When the schema has at least one valid request object",
            "When the schema has the query object"
          ],
          "duration": 0,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is an object When the schema has at least one valid request object When the schema has the query object should validate, the request object matches the schema",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should validate, the request object matches the schema"
        },
        {
          "ancestorTitles": [
            "When validating a request object",
            "When the schema is an object",
            "When the schema has at least one valid request object",
            "When the schema has the query object"
          ],
          "duration": 0,
          "failureMessages": [],
          "fullName": "When validating a request object When the schema is an object When the schema has at least one valid request object When the schema has the query object should validate returning the error since, the request object missmatches the schema",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should validate returning the error since, the request object missmatches the schema"
        }
      ],
      "skipped": false,
      "leaks": false
    },
    {
      "failureMessage": null,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "perfStats": {
        "end": 1564734348880,
        "start": 1564734346513
      },
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "/home/nodejs/app/routes/exercise/users.test.js",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 2,
          "failureMessages": [],
          "fullName": "two plus two is four",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "two plus two is four"
        },
        {
          "ancestorTitles": [
            "POST /users/subscribe"
          ],
          "duration": 38,
          "failureMessages": [],
          "fullName": "POST /users/subscribe should return a 200 status code",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return a 200 status code"
        }
      ],
      "skipped": false,
      "leaks": false
    },
    {
      "failureMessage": null,
      "numFailingTests": 0,
      "numPassingTests": 10,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "perfStats": {
        "end": 1564734349148,
        "start": 1564734346510
      },
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "unmatched": 0,
        "updated": 0,
        "uncheckedKeys": []
      },
      "testFilePath": "/home/nodejs/app/routes/solution/users.test.js",
      "testResults": [
        {
          "ancestorTitles": [
            "POST /userssample/subscribesample",
            "When the request has invalid input data",
            "When the request doesn't have the expected body fields"
          ],
          "duration": 48,
          "failureMessages": [],
          "fullName": "POST /userssample/subscribesample When the request has invalid input data When the request doesn't have the expected body fields should call util.validateRequest to make the schema validation of the request",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should call util.validateRequest to make the schema validation of the request"
        },
        {
          "ancestorTitles": [
            "POST /userssample/subscribesample",
            "When the request has invalid input data",
            "When the request doesn't have the expected body fields"
          ],
          "duration": 4,
          "failureMessages": [],
          "fullName": "POST /userssample/subscribesample When the request has invalid input data When the request doesn't have the expected body fields should return a 400 status code",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return a 400 status code"
        },
        {
          "ancestorTitles": [
            "POST /userssample/subscribesample",
            "When the request has invalid input data",
            "When the request doesn't have a valid email format"
          ],
          "duration": 10,
          "failureMessages": [],
          "fullName": "POST /userssample/subscribesample When the request has invalid input data When the request doesn't have a valid email format should call util.validateRequest to make the schema validation of the request",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should call util.validateRequest to make the schema validation of the request"
        },
        {
          "ancestorTitles": [
            "POST /userssample/subscribesample",
            "When the request has invalid input data",
            "When the request doesn't have a valid email format"
          ],
          "duration": 2,
          "failureMessages": [],
          "fullName": "POST /userssample/subscribesample When the request has invalid input data When the request doesn't have a valid email format should return a 400 status code",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return a 400 status code"
        },
        {
          "ancestorTitles": [
            "POST /userssample/subscribesample",
            "When the request has invalid input data",
            "When the name field is not a string"
          ],
          "duration": 2,
          "failureMessages": [],
          "fullName": "POST /userssample/subscribesample When the request has invalid input data When the name field is not a string should call util.validateRequest to make the schema validation of the request",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should call util.validateRequest to make the schema validation of the request"
        },
        {
          "ancestorTitles": [
            "POST /userssample/subscribesample",
            "When the request has invalid input data",
            "When the name field is not a string"
          ],
          "duration": 2,
          "failureMessages": [],
          "fullName": "POST /userssample/subscribesample When the request has invalid input data When the name field is not a string should return a 400 status code",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return a 400 status code"
        },
        {
          "ancestorTitles": [
            "POST /userssample/subscribesample",
            "When the request has valid input data",
            "When creating the connection to mongo database",
            "When the connection is succesfull"
          ],
          "duration": 6,
          "failureMessages": [],
          "fullName": "POST /userssample/subscribesample When the request has valid input data When creating the connection to mongo database When the connection is succesfull should call the mongoose.connect and return a 200 status code",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should call the mongoose.connect and return a 200 status code"
        },
        {
          "ancestorTitles": [
            "POST /userssample/subscribesample",
            "When the request has valid input data",
            "When creating the connection to mongo database",
            "When the connection is succesfull",
            "When creating the new user is successfull"
          ],
          "duration": 4,
          "failureMessages": [],
          "fullName": "POST /userssample/subscribesample When the request has valid input data When creating the connection to mongo database When the connection is succesfull When creating the new user is successfull should save in mongo with the specified args",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should save in mongo with the specified args"
        },
        {
          "ancestorTitles": [
            "POST /userssample/subscribesample",
            "When the request has valid input data",
            "When creating the connection to mongo database",
            "When the connection is succesfull",
            "When creating the new user is NOT successfull"
          ],
          "duration": 15,
          "failureMessages": [],
          "fullName": "POST /userssample/subscribesample When the request has valid input data When creating the connection to mongo database When the connection is succesfull When creating the new user is NOT successfull should call return a 500 status code",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should call return a 500 status code"
        },
        {
          "ancestorTitles": [
            "POST /userssample/subscribesample",
            "When the request has valid input data",
            "When creating the connection to mongo database",
            "When the connection is not succesfull"
          ],
          "duration": 8,
          "failureMessages": [],
          "fullName": "POST /userssample/subscribesample When the request has valid input data When creating the connection to mongo database When the connection is not succesfull should call the mongoose.connect and return a 500 status code",
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should call the mongoose.connect and return a 500 status code"
        }
      ],
      "skipped": false,
      "leaks": false
    }
  ],
  "wasInterrupted": false,
  "coverageMap": {
    "/home/nodejs/app/util/index.js": {
      "path": "/home/nodejs/app/util/index.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 1
          }
        }
      },
      "fnMap": {},
      "branchMap": {},
      "s": {
        "0": 3
      },
      "f": {},
      "b": {},
      "_coverageSchema": "43e27e138ebf9cfc5966b082cf9a028302ed4184",
      "hash": "d90d78c73ce08cce3a73c1d851eead0e4429bbde"
    },
    "/home/nodejs/app/util/validateRequest.js": {
      "path": "/home/nodejs/app/util/validateRequest.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 1,
            "column": 12
          },
          "end": {
            "line": 1,
            "column": 26
          }
        },
        "1": {
          "start": {
            "line": 2,
            "column": 28
          },
          "end": {
            "line": 8,
            "column": 1
          }
        },
        "2": {
          "start": {
            "line": 10,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 1
          }
        },
        "3": {
          "start": {
            "line": 12,
            "column": 4
          },
          "end": {
            "line": 14,
            "column": 5
          }
        },
        "4": {
          "start": {
            "line": 13,
            "column": 8
          },
          "end": {
            "line": 13,
            "column": 20
          }
        },
        "5": {
          "start": {
            "line": 16,
            "column": 4
          },
          "end": {
            "line": 18,
            "column": 5
          }
        },
        "6": {
          "start": {
            "line": 17,
            "column": 8
          },
          "end": {
            "line": 17,
            "column": 48
          }
        },
        "7": {
          "start": {
            "line": 20,
            "column": 15
          },
          "end": {
            "line": 20,
            "column": 34
          }
        },
        "8": {
          "start": {
            "line": 21,
            "column": 4
          },
          "end": {
            "line": 23,
            "column": 5
          }
        },
        "9": {
          "start": {
            "line": 22,
            "column": 8
          },
          "end": {
            "line": 22,
            "column": 20
          }
        },
        "10": {
          "start": {
            "line": 25,
            "column": 4
          },
          "end": {
            "line": 25,
            "column": 65
          }
        },
        "11": {
          "start": {
            "line": 25,
            "column": 28
          },
          "end": {
            "line": 25,
            "column": 63
          }
        },
        "12": {
          "start": {
            "line": 26,
            "column": 4
          },
          "end": {
            "line": 28,
            "column": 5
          }
        },
        "13": {
          "start": {
            "line": 27,
            "column": 8
          },
          "end": {
            "line": 27,
            "column": 20
          }
        },
        "14": {
          "start": {
            "line": 31,
            "column": 4
          },
          "end": {
            "line": 37,
            "column": 5
          }
        },
        "15": {
          "start": {
            "line": 31,
            "column": 17
          },
          "end": {
            "line": 31,
            "column": 18
          }
        },
        "16": {
          "start": {
            "line": 32,
            "column": 24
          },
          "end": {
            "line": 32,
            "column": 31
          }
        },
        "17": {
          "start": {
            "line": 33,
            "column": 8
          },
          "end": {
            "line": 33,
            "column": 65
          }
        },
        "18": {
          "start": {
            "line": 34,
            "column": 8
          },
          "end": {
            "line": 36,
            "column": 9
          }
        },
        "19": {
          "start": {
            "line": 35,
            "column": 12
          },
          "end": {
            "line": 35,
            "column": 18
          }
        },
        "20": {
          "start": {
            "line": 39,
            "column": 4
          },
          "end": {
            "line": 43,
            "column": 5
          }
        },
        "21": {
          "start": {
            "line": 40,
            "column": 8
          },
          "end": {
            "line": 40,
            "column": 20
          }
        },
        "22": {
          "start": {
            "line": 42,
            "column": 8
          },
          "end": {
            "line": 42,
            "column": 48
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "(anonymous_0)",
          "decl": {
            "start": {
              "line": 10,
              "column": 17
            },
            "end": {
              "line": 10,
              "column": 18
            }
          },
          "loc": {
            "start": {
              "line": 10,
              "column": 38
            },
            "end": {
              "line": 45,
              "column": 1
            }
          },
          "line": 10
        },
        "1": {
          "name": "(anonymous_1)",
          "decl": {
            "start": {
              "line": 25,
              "column": 23
            },
            "end": {
              "line": 25,
              "column": 24
            }
          },
          "loc": {
            "start": {
              "line": 25,
              "column": 28
            },
            "end": {
              "line": 25,
              "column": 63
            }
          },
          "line": 25
        }
      },
      "branchMap": {
        "0": {
          "loc": {
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 5
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 5
              }
            },
            {
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 5
              }
            }
          ],
          "line": 12
        },
        "1": {
          "loc": {
            "start": {
              "line": 16,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 5
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 16,
                "column": 4
              },
              "end": {
                "line": 18,
                "column": 5
              }
            },
            {
              "start": {
                "line": 16,
                "column": 4
              },
              "end": {
                "line": 18,
                "column": 5
              }
            }
          ],
          "line": 16
        },
        "2": {
          "loc": {
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 5
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 21,
                "column": 4
              },
              "end": {
                "line": 23,
                "column": 5
              }
            },
            {
              "start": {
                "line": 21,
                "column": 4
              },
              "end": {
                "line": 23,
                "column": 5
              }
            }
          ],
          "line": 21
        },
        "3": {
          "loc": {
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 5
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 26,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 5
              }
            },
            {
              "start": {
                "line": 26,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 5
              }
            }
          ],
          "line": 26
        },
        "4": {
          "loc": {
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 34,
                "column": 8
              },
              "end": {
                "line": 36,
                "column": 9
              }
            },
            {
              "start": {
                "line": 34,
                "column": 8
              },
              "end": {
                "line": 36,
                "column": 9
              }
            }
          ],
          "line": 34
        },
        "5": {
          "loc": {
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 39,
                "column": 4
              },
              "end": {
                "line": 43,
                "column": 5
              }
            },
            {
              "start": {
                "line": 39,
                "column": 4
              },
              "end": {
                "line": 43,
                "column": 5
              }
            }
          ],
          "line": 39
        }
      },
      "s": {
        "0": 3,
        "1": 3,
        "2": 3,
        "3": 25,
        "4": 2,
        "5": 23,
        "6": 1,
        "7": 22,
        "8": 22,
        "9": 1,
        "10": 21,
        "11": 21,
        "12": 21,
        "13": 1,
        "14": 20,
        "15": 20,
        "16": 20,
        "17": 20,
        "18": 20,
        "19": 11,
        "20": 20,
        "21": 9,
        "22": 11
      },
      "f": {
        "0": 25,
        "1": 21
      },
      "b": {
        "0": [
          2,
          23
        ],
        "1": [
          1,
          22
        ],
        "2": [
          1,
          21
        ],
        "3": [
          1,
          20
        ],
        "4": [
          11,
          9
        ],
        "5": [
          9,
          11
        ]
      },
      "_coverageSchema": "43e27e138ebf9cfc5966b082cf9a028302ed4184",
      "hash": "0e1e54c6576198cbf41728f1bfb4938180bf562b"
    },
    "/home/nodejs/app/app.js": {
      "path": "/home/nodejs/app/app.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 1,
            "column": 13
          },
          "end": {
            "line": 1,
            "column": 28
          }
        },
        "1": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 70
          }
        },
        "2": {
          "start": {
            "line": 3,
            "column": 18
          },
          "end": {
            "line": 3,
            "column": 40
          }
        },
        "3": {
          "start": {
            "line": 4,
            "column": 14
          },
          "end": {
            "line": 4,
            "column": 32
          }
        },
        "4": {
          "start": {
            "line": 5,
            "column": 19
          },
          "end": {
            "line": 5,
            "column": 43
          }
        },
        "5": {
          "start": {
            "line": 6,
            "column": 13
          },
          "end": {
            "line": 6,
            "column": 30
          }
        },
        "6": {
          "start": {
            "line": 8,
            "column": 18
          },
          "end": {
            "line": 8,
            "column": 43
          }
        },
        "7": {
          "start": {
            "line": 9,
            "column": 18
          },
          "end": {
            "line": 9,
            "column": 52
          }
        },
        "8": {
          "start": {
            "line": 10,
            "column": 26
          },
          "end": {
            "line": 10,
            "column": 60
          }
        },
        "9": {
          "start": {
            "line": 12,
            "column": 10
          },
          "end": {
            "line": 12,
            "column": 19
          }
        },
        "10": {
          "start": {
            "line": 15,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 48
          }
        },
        "11": {
          "start": {
            "line": 16,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 31
          }
        },
        "12": {
          "start": {
            "line": 18,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 23
          }
        },
        "13": {
          "start": {
            "line": 19,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 24
          }
        },
        "14": {
          "start": {
            "line": 20,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 49
          }
        },
        "15": {
          "start": {
            "line": 21,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 24
          }
        },
        "16": {
          "start": {
            "line": 22,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 56
          }
        },
        "17": {
          "start": {
            "line": 24,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 26
          }
        },
        "18": {
          "start": {
            "line": 25,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 45
          }
        },
        "19": {
          "start": {
            "line": 26,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 31
          }
        },
        "20": {
          "start": {
            "line": 29,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 3
          }
        },
        "21": {
          "start": {
            "line": 30,
            "column": 2
          },
          "end": {
            "line": 30,
            "column": 25
          }
        },
        "22": {
          "start": {
            "line": 34,
            "column": 0
          },
          "end": {
            "line": 52,
            "column": 3
          }
        },
        "23": {
          "start": {
            "line": 35,
            "column": 2
          },
          "end": {
            "line": 46,
            "column": 4
          }
        },
        "24": {
          "start": {
            "line": 47,
            "column": 2
          },
          "end": {
            "line": 51,
            "column": 3
          }
        },
        "25": {
          "start": {
            "line": 48,
            "column": 4
          },
          "end": {
            "line": 48,
            "column": 59
          }
        },
        "26": {
          "start": {
            "line": 50,
            "column": 4
          },
          "end": {
            "line": 50,
            "column": 23
          }
        },
        "27": {
          "start": {
            "line": 54,
            "column": 0
          },
          "end": {
            "line": 54,
            "column": 21
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "(anonymous_0)",
          "decl": {
            "start": {
              "line": 29,
              "column": 8
            },
            "end": {
              "line": 29,
              "column": 9
            }
          },
          "loc": {
            "start": {
              "line": 29,
              "column": 33
            },
            "end": {
              "line": 31,
              "column": 1
            }
          },
          "line": 29
        },
        "1": {
          "name": "(anonymous_1)",
          "decl": {
            "start": {
              "line": 34,
              "column": 8
            },
            "end": {
              "line": 34,
              "column": 9
            }
          },
          "loc": {
            "start": {
              "line": 34,
              "column": 35
            },
            "end": {
              "line": 52,
              "column": 1
            }
          },
          "line": 34
        }
      },
      "branchMap": {},
      "s": {
        "0": 2,
        "1": 2,
        "2": 2,
        "3": 2,
        "4": 2,
        "5": 2,
        "6": 2,
        "7": 2,
        "8": 2,
        "9": 2,
        "10": 2,
        "11": 2,
        "12": 2,
        "13": 2,
        "14": 2,
        "15": 2,
        "16": 2,
        "17": 2,
        "18": 2,
        "19": 2,
        "20": 2,
        "21": 0,
        "22": 2,
        "23": 2,
        "24": 2,
        "25": 2,
        "26": 0,
        "27": 2
      },
      "f": {
        "0": 0,
        "1": 2
      },
      "b": {},
      "_coverageSchema": "43e27e138ebf9cfc5966b082cf9a028302ed4184",
      "hash": "7c76a62c27d44bc955df7c7993b647a66fa0e5bb"
    },
    "/home/nodejs/app/routes/index.js": {
      "path": "/home/nodejs/app/routes/index.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 1,
            "column": 14
          },
          "end": {
            "line": 1,
            "column": 32
          }
        },
        "1": {
          "start": {
            "line": 2,
            "column": 13
          },
          "end": {
            "line": 2,
            "column": 29
          }
        },
        "2": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 3
          }
        },
        "3": {
          "start": {
            "line": 6,
            "column": 2
          },
          "end": {
            "line": 6,
            "column": 44
          }
        },
        "4": {
          "start": {
            "line": 9,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 24
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "(anonymous_0)",
          "decl": {
            "start": {
              "line": 5,
              "column": 16
            },
            "end": {
              "line": 5,
              "column": 17
            }
          },
          "loc": {
            "start": {
              "line": 5,
              "column": 41
            },
            "end": {
              "line": 7,
              "column": 1
            }
          },
          "line": 5
        }
      },
      "branchMap": {},
      "s": {
        "0": 2,
        "1": 2,
        "2": 2,
        "3": 0,
        "4": 2
      },
      "f": {
        "0": 0
      },
      "b": {},
      "_coverageSchema": "43e27e138ebf9cfc5966b082cf9a028302ed4184",
      "hash": "1539a55962fe226a87a745db0ca8b8a48638fa3e"
    },
    "/home/nodejs/app/routes/exercise/users.js": {
      "path": "/home/nodejs/app/routes/exercise/users.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 1,
            "column": 14
          },
          "end": {
            "line": 1,
            "column": 32
          }
        },
        "1": {
          "start": {
            "line": 2,
            "column": 13
          },
          "end": {
            "line": 2,
            "column": 29
          }
        },
        "2": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 3
          }
        },
        "3": {
          "start": {
            "line": 6,
            "column": 2
          },
          "end": {
            "line": 6,
            "column": 38
          }
        },
        "4": {
          "start": {
            "line": 10,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 3
          }
        },
        "5": {
          "start": {
            "line": 11,
            "column": 2
          },
          "end": {
            "line": 11,
            "column": 38
          }
        },
        "6": {
          "start": {
            "line": 14,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 24
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "(anonymous_0)",
          "decl": {
            "start": {
              "line": 5,
              "column": 16
            },
            "end": {
              "line": 5,
              "column": 17
            }
          },
          "loc": {
            "start": {
              "line": 5,
              "column": 41
            },
            "end": {
              "line": 7,
              "column": 1
            }
          },
          "line": 5
        },
        "1": {
          "name": "(anonymous_1)",
          "decl": {
            "start": {
              "line": 10,
              "column": 26
            },
            "end": {
              "line": 10,
              "column": 27
            }
          },
          "loc": {
            "start": {
              "line": 10,
              "column": 51
            },
            "end": {
              "line": 12,
              "column": 1
            }
          },
          "line": 10
        }
      },
      "branchMap": {},
      "s": {
        "0": 2,
        "1": 2,
        "2": 2,
        "3": 0,
        "4": 2,
        "5": 1,
        "6": 2
      },
      "f": {
        "0": 0,
        "1": 1
      },
      "b": {},
      "_coverageSchema": "43e27e138ebf9cfc5966b082cf9a028302ed4184",
      "hash": "4b467ba4ac2322597de3e182cd55c7c040b3abe5"
    },
    "/home/nodejs/app/routes/solution/users.js": {
      "path": "/home/nodejs/app/routes/solution/users.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 1,
            "column": 14
          },
          "end": {
            "line": 1,
            "column": 32
          }
        },
        "1": {
          "start": {
            "line": 2,
            "column": 13
          },
          "end": {
            "line": 2,
            "column": 29
          }
        },
        "2": {
          "start": {
            "line": 3,
            "column": 34
          },
          "end": {
            "line": 3,
            "column": 90
          }
        },
        "3": {
          "start": {
            "line": 4,
            "column": 15
          },
          "end": {
            "line": 4,
            "column": 40
          }
        },
        "4": {
          "start": {
            "line": 5,
            "column": 17
          },
          "end": {
            "line": 5,
            "column": 36
          }
        },
        "5": {
          "start": {
            "line": 6,
            "column": 18
          },
          "end": {
            "line": 6,
            "column": 49
          }
        },
        "6": {
          "start": {
            "line": 9,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 3
          }
        },
        "7": {
          "start": {
            "line": 12,
            "column": 4
          },
          "end": {
            "line": 25,
            "column": 5
          }
        },
        "8": {
          "start": {
            "line": 13,
            "column": 6
          },
          "end": {
            "line": 15,
            "column": 9
          }
        },
        "9": {
          "start": {
            "line": 17,
            "column": 6
          },
          "end": {
            "line": 20,
            "column": 9
          }
        },
        "10": {
          "start": {
            "line": 22,
            "column": 6
          },
          "end": {
            "line": 22,
            "column": 29
          }
        },
        "11": {
          "start": {
            "line": 24,
            "column": 6
          },
          "end": {
            "line": 24,
            "column": 25
          }
        },
        "12": {
          "start": {
            "line": 29,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 24
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "(anonymous_0)",
          "decl": {
            "start": {
              "line": 11,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 3
            }
          },
          "loc": {
            "start": {
              "line": 11,
              "column": 28
            },
            "end": {
              "line": 26,
              "column": 3
            }
          },
          "line": 11
        }
      },
      "branchMap": {},
      "s": {
        "0": 2,
        "1": 2,
        "2": 2,
        "3": 2,
        "4": 2,
        "5": 2,
        "6": 2,
        "7": 4,
        "8": 4,
        "9": 3,
        "10": 2,
        "11": 2,
        "12": 2
      },
      "f": {
        "0": 4
      },
      "b": {},
      "_coverageSchema": "43e27e138ebf9cfc5966b082cf9a028302ed4184",
      "hash": "640b7ea8a1c0fce4f6e4cb9f3a1d53ce614c6717"
    },
    "/home/nodejs/app/middlewares/middlewareValidateRequest.js": {
      "path": "/home/nodejs/app/middlewares/middlewareValidateRequest.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 1,
            "column": 13
          },
          "end": {
            "line": 1,
            "column": 39
          }
        },
        "1": {
          "start": {
            "line": 2,
            "column": 17
          },
          "end": {
            "line": 13,
            "column": 1
          }
        },
        "2": {
          "start": {
            "line": 4,
            "column": 4
          },
          "end": {
            "line": 12,
            "column": 6
          }
        },
        "3": {
          "start": {
            "line": 5,
            "column": 23
          },
          "end": {
            "line": 5,
            "column": 56
          }
        },
        "4": {
          "start": {
            "line": 6,
            "column": 8
          },
          "end": {
            "line": 10,
            "column": 9
          }
        },
        "5": {
          "start": {
            "line": 7,
            "column": 12
          },
          "end": {
            "line": 7,
            "column": 19
          }
        },
        "6": {
          "start": {
            "line": 9,
            "column": 12
          },
          "end": {
            "line": 9,
            "column": 41
          }
        },
        "7": {
          "start": {
            "line": 16,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 30
          }
        }
      },
      "fnMap": {
        "0": {
          "name": "(anonymous_0)",
          "decl": {
            "start": {
              "line": 2,
              "column": 17
            },
            "end": {
              "line": 2,
              "column": 18
            }
          },
          "loc": {
            "start": {
              "line": 2,
              "column": 34
            },
            "end": {
              "line": 13,
              "column": 1
            }
          },
          "line": 2
        },
        "1": {
          "name": "(anonymous_1)",
          "decl": {
            "start": {
              "line": 4,
              "column": 11
            },
            "end": {
              "line": 4,
              "column": 12
            }
          },
          "loc": {
            "start": {
              "line": 4,
              "column": 31
            },
            "end": {
              "line": 12,
              "column": 5
            }
          },
          "line": 4
        }
      },
      "branchMap": {
        "0": {
          "loc": {
            "start": {
              "line": 2,
              "column": 18
            },
            "end": {
              "line": 2,
              "column": 29
            }
          },
          "type": "default-arg",
          "locations": [
            {
              "start": {
                "line": 2,
                "column": 27
              },
              "end": {
                "line": 2,
                "column": 29
              }
            }
          ],
          "line": 2
        },
        "1": {
          "loc": {
            "start": {
              "line": 6,
              "column": 8
            },
            "end": {
              "line": 10,
              "column": 9
            }
          },
          "type": "if",
          "locations": [
            {
              "start": {
                "line": 6,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 9
              }
            },
            {
              "start": {
                "line": 6,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 9
              }
            }
          ],
          "line": 6
        }
      },
      "s": {
        "0": 2,
        "1": 2,
        "2": 2,
        "3": 10,
        "4": 10,
        "5": 4,
        "6": 6,
        "7": 2
      },
      "f": {
        "0": 2,
        "1": 10
      },
      "b": {
        "0": [
          0
        ],
        "1": [
          4,
          6
        ]
      },
      "_coverageSchema": "43e27e138ebf9cfc5966b082cf9a028302ed4184",
      "hash": "21f9addc2d8033951d9f1cacead3e634e08ab254"
    },
    "/home/nodejs/app/routes/solution/users.schema.js": {
      "path": "/home/nodejs/app/routes/solution/users.schema.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 1,
            "column": 12
          },
          "end": {
            "line": 1,
            "column": 26
          }
        },
        "1": {
          "start": {
            "line": 2,
            "column": 15
          },
          "end": {
            "line": 7,
            "column": 1
          }
        },
        "2": {
          "start": {
            "line": 8,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 28
          }
        }
      },
      "fnMap": {},
      "branchMap": {},
      "s": {
        "0": 2,
        "1": 2,
        "2": 2
      },
      "f": {},
      "b": {},
      "_coverageSchema": "43e27e138ebf9cfc5966b082cf9a028302ed4184",
      "hash": "d0747b8dc06478bea58f833ca3e55fc989d278ef"
    },
    "/home/nodejs/app/models/users.js": {
      "path": "/home/nodejs/app/models/users.js",
      "statementMap": {
        "0": {
          "start": {
            "line": 1,
            "column": 17
          },
          "end": {
            "line": 1,
            "column": 36
          }
        },
        "1": {
          "start": {
            "line": 2,
            "column": 15
          },
          "end": {
            "line": 2,
            "column": 30
          }
        },
        "2": {
          "start": {
            "line": 4,
            "column": 20
          },
          "end": {
            "line": 11,
            "column": 2
          }
        },
        "3": {
          "start": {
            "line": 13,
            "column": 14
          },
          "end": {
            "line": 13,
            "column": 50
          }
        },
        "4": {
          "start": {
            "line": 15,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 23
          }
        }
      },
      "fnMap": {},
      "branchMap": {},
      "s": {
        "0": 2,
        "1": 2,
        "2": 2,
        "3": 2,
        "4": 2
      },
      "f": {},
      "b": {},
      "_coverageSchema": "43e27e138ebf9cfc5966b082cf9a028302ed4184",
      "hash": "5cb121b8c6154306b219ce6596e28360f1edb385"
    }
  }
}